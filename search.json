[{"path":"https://hsonne.github.io/wordcards/articles/tutorial.html","id":"hintergrund","dir":"Articles","previous_headings":"","what":"Hintergrund","title":"Erstellen von Wort- und Silbenkarten für Erstleser","text":"Die Idee zu diesem R-Paket kam mir bei meiner Beschäftigung als Lesepate einer Berliner Grundschule. Die Kinder, die ich betreue, können der dritten Klasse zum Teil noch sehr schlecht lesen. Ich habe angefangen, mit Karteikarten zu arbeiten, auf die ich Wörter oder Silben schrieb. Ich hatte den Eindruck, dass es ein bisschen funktioniert hat und dass es den Kindern etwas Spaß gemacht hat, mit den Karten zu arbeiten. Ich habe festgestellt, dass es sehr viele verschiedene Wörter und Silben gibt und ich habe mich gefragt, welche ich aufschreiben sollte, welche wohl “wichtigsten” sein könnten, weil sie häufigsten vorkommen. Die Häufigkeit der Wörter und Silben hängt natürlich von dem Text oder der Menge von Texten ab, die ich betrachte. Ich dachte mir, dass es zielführend sein könnte, wenn ich mir genau den Text angucke, den die Kinder der Schule als nächstes lesen würden. Dieses Paket enthält Funktionen, die die Wörter einem vorgegebenen Text zählen oder sie Silben zerlegen und dann die Silben und deren Arten (Vorsilbe, Nachsilbe, “innere” Silbe, eigenständiges Wort) zählen. Im Folgenden möchte ich zeigen, wie das geht.","code":""},{"path":"https://hsonne.github.io/wordcards/articles/tutorial.html","id":"bereitstellen-eines-textes","dir":"Articles","previous_headings":"","what":"Bereitstellen eines Textes","title":"Erstellen von Wort- und Silbenkarten für Erstleser","text":"Als erstes benötigen wir einen Text. Ich habe im Internet einen frei zugänglichen Text gefunden unter dieser Adresse: https://www.zitronenbande.de/kater-leo-arzt/ Ich habe eine Funktion geschrieben, die den Text aus dem Internet lädt. Im ersten Schritt lesen wir den gesamten Text die Variable raw_text ein: Der Text entspricht einer langen Zeile, von der wir hier mal nur die ersten 80 Zeichen ausgeben:","code":"raw_text <- wordcards:::read_story_kater_leo_arzt() writeLines(substr(raw_text, 1L, 80L)) #> Eigentlich begann der Tag für Kater Leo richtig gut. Er rekelte sich nochmal ord"},{"path":"https://hsonne.github.io/wordcards/articles/tutorial.html","id":"zerlegen-des-textes-in-seine-wörter","dir":"Articles","previous_headings":"","what":"Zerlegen des Textes in seine Wörter","title":"Erstellen von Wort- und Silbenkarten für Erstleser","text":"Als nächstes zerlegen wir den Text seine Wörter, wobei alle Interpunktionszeichen (Punkt, Komma, Fragezeichen, usw.) sowie Ziffern ignoriert werden. Der Text hat insgesamt 1367 Wörter. Die ersten sind: Die letzten Wörter des Textes sind:","code":"words <- wordcards:::text_to_words(raw_text) head(words) #> [1] \"Eigentlich\" \"begann\"     \"der\"        \"Tag\"        \"für\"        #> [6] \"Kater\" tail(words) #> [1] \"und\"     \"freute\"  \"sich\"    \"auf\"     \"sein\"    \"Zuhause\""},{"path":"https://hsonne.github.io/wordcards/articles/tutorial.html","id":"häufigste-wörter","dir":"Articles","previous_headings":"","what":"Häufigste Wörter","title":"Erstellen von Wort- und Silbenkarten für Erstleser","text":"Wir können bereits sehr einfach die häufigsten Wörter ermitteln: Zuerst werden die verschiedenen Wörter mit table() gezählt, dann werden die entsprechenden Haufigkeiten mit sort() aufsteigend sortiert. Schließlich werden die letzten (also häufigsten) Wörter mit tail() geholt und ausgegeben. Als Vorbereitung für die Erstellung der Karteikarten wird eine Tabelle erzeugt, die die Wörter (word), absteigend nach ihrer Häufigkeit (frequency) sortiert, zusammen mit ihrer Häufigkeit und mit der Anzahl ihrer Buchstaben (nchar) enthält. Hier seht ihr die vollständige Tabelle:","code":"tail(sort(table(words))) #> words #>  der sich  Leo  die   er  und  #>   23   23   24   32   33   44 word_table <- wordcards:::words_to_word_table(words) DT::datatable(word_table) n <- 32  wordcards:::plot_word_cards(   words = word_table$word[1:n],    frequencies = word_table$frequency[1:n],    both_cases = FALSE,   to_pdf = FALSE,   cex = 3 )"},{"path":"https://hsonne.github.io/wordcards/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hauke Sonnenberg. Author, maintainer.","code":""},{"path":"https://hsonne.github.io/wordcards/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sonnenberg H (2022). wordcards: Create Word Syllable Cards Text. R package version 0.0.0.9000, https://github.com/hsonne/wordcards.","code":"@Manual{,   title = {wordcards: Create Word or Syllable Cards from Text},   author = {Hauke Sonnenberg},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/hsonne/wordcards}, }"},{"path":"https://hsonne.github.io/wordcards/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Word or Syllable Cards from Text","text":"details install KWB-R packages checkout installation tutorial.","code":"### Optionally: specify GitHub Personal Access Token (GITHUB_PAT) ### See here why this might be important for you: ### https://kwb-r.github.io/kwb.pkgbuild/articles/install.html#set-your-github_pat  # Sys.setenv(GITHUB_PAT = \"mysecret_access_token\")  # Install package \"remotes\" from CRAN if (! require(\"remotes\")) {   install.packages(\"remotes\", repos = \"https://cloud.r-project.org\") }  # Install KWB package 'wordcards' from GitHub remotes::install_github(\"hsonne/wordcards\")"},{"path":"https://hsonne.github.io/wordcards/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Hauke Sonnenberg Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hsonne.github.io/wordcards/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://hsonne.github.io/wordcards/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://hsonne.github.io/wordcards/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://hsonne.github.io/wordcards/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://hsonne.github.io/wordcards/news/index.html","id":"wordcards-0009000","dir":"Changelog","previous_headings":"","what":"wordcards 0.0.0.9000","title":"wordcards 0.0.0.9000","text":"Added NEWS.md file track changes package. see https://style.tidyverse.org/news.html writing good NEWS.md","code":""}]
